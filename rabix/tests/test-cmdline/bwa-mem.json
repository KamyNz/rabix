{
  "$job": {
    "tool": {
      "$ref": "#tool"
    },
    "inputs": {
      "reference": {
        "path": "./rabix/tests/test-files/chr20.fa",
        "size": 123,
        "checksum": "sha1$hash",
        "meta": {
          "file_type": "fastq"
        }
      },
      "reads": [
        {
          "path": "./rabix/tests/test-files/example_human_Illumina.pe_1.fastq",
          "meta": {
            "file_type": "fastq",
            "sample": "SAMPLE1"
          }
        },
        {
          "path": "./rabix/tests/test-files/example_human_Illumina.pe_2.fastq",
          "meta": {
            "file_type": "fastq",
            "sample": "SAMPLE1"
          }
        }
      ],
      "min_std_max_min": [
        1,
        2,
        3,
        4
      ],
      "minimum_seed_length": 3
    },
    "platform": "http://example.org/my_platform/v1",
    "allocatedResources": {
      "cpu": 4,
      "mem": 5000
    }
  },
  "tool": {
    "id": "https://rabix-vayu.sbgenomics.com:11180/v1/apps/luka_stage/bwa/bwa-mem/3/",
    "class": "CommandLineTool",
    "@context": "https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md",
    "label": "BWA mem",
    "description": "",
    "owner": [],
    "contributor": [],
    "requirements": [
      {
        "dockerPull": "images.sbgenomics.com/rabix/bwa:9d3b9b0359cf",
        "class": "DockerRequirement"
      },
      {
        "value": 1,
        "class": "CPURequirement"
      },
      {
        "value": 1000,
        "class": "MemRequirement"
      }
    ],
    "inputs": [
      {
        "type": [
          "File"
        ],
        "description": "",
        "label": "Reference",
        "inputBinding": {
          "sbg:cmdInclude": "true",
          "valueFrom": {
            "engine": "#cwl-js-engine",
            "script": "$self.path.split('.').slice(0, -1).join('.')",
            "class": "Expression"
          },
          "separate": true,
          "position": 2
        },
        "sbg:category": "",
        "id": "#reference"
      },
      {
        "type": [
          {
            "items": "File",
            "type": "array"
          }
        ],
        "description": "",
        "label": "Reads",
        "inputBinding": {
          "sbg:cmdInclude": "true",
          "separate": true,
          "position": 3
        },
        "sbg:category": "",
        "id": "#reads"
      },
      {
        "type": [
          "null",
          "int"
        ],
        "description": "",
        "label": "Minimum seed lengts (-m)",
        "inputBinding": {
          "prefix": "-k",
          "sbg:cmdInclude": "true",
          "separate": true,
          "position": 1
        },
        "sbg:category": "",
        "id": "#minimum_seed_length"
      },
      {
        "type": [
          "null",
          {
            "items": "float",
            "type": "array"
          }
        ],
        "description": "Specify the mean, standard deviation (10% of the mean if absent), max (4 sigma from the mean if absent) and min of the insert size distribution. FR orientation only.",
        "label": "Mean/std/max/min",
        "inputBinding": {
          "prefix": "-I",
          "sbg:cmdInclude": "true",
          "separate": true,
          "position": 1,
          "itemSeparator": ","
        },
        "sbg:category": "",
        "id": "#mean_std_max_min",
        "schema": [
          "null",
          {
            "items": "float",
            "type": "array"
          }
        ]
      }
    ],
    "outputs": [
      {
        "type": [
          "null",
          "File"
        ],
        "id": "#sam",
        "outputBinding": {
          "glob": "*.sam",
          "metadata": {
            "file_type": "sam",
            "expr_test": {
              "script": "{if($job.inputs.minimum_seed_length > 2) { return 'successful'} else {return 'unsuccessful'}}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          }
        }
      }
    ],
    "baseCommand": [
      "bwa",
      "mem"
    ],
    "stdin": "",
    "stdout": "aligned.sam",
    "successCodes": [],
    "temporaryFailCodes": [],
    "arguments": [],
    "sbg:modifiedBy": "luka_stage",
    "sbg:job": {
      "inputs": {
        "mean_std_max_min": [
          0,
          1
        ],
        "reads": [
          {
            "path": "read_pe1"
          },
          {
            "path": "read_pe2"
          }
        ],
        "reference": {
          "path": "reference.ext"
        },
        "minimum_seed_length": 0
      },
      "allocatedResources": {
        "mem": 1000,
        "cpu": 1
      }
    },
    "sbg:sbgMaintained": false,
    "sbg:revisionsInfo": [
      {
        "sbg:modifiedOn": 1437405763,
        "sbg:revision": 0,
        "sbg:modifiedBy": "luka_stage"
      },
      {
        "sbg:modifiedOn": 1437408370,
        "sbg:revision": 1,
        "sbg:modifiedBy": "luka_stage"
      },
      {
        "sbg:modifiedOn": 1437408427,
        "sbg:revision": 2,
        "sbg:modifiedBy": "luka_stage"
      },
      {
        "sbg:modifiedOn": 1437461694,
        "sbg:revision": 3,
        "sbg:modifiedBy": "luka_stage"
      }
    ],
    "sbg:categories": [
      "Aligner"
    ],
    "sbg:revision": 3,
    "sbg:projectSlug": "luka_stage/bwa",
    "sbg:createdBy": "luka_stage",
    "sbg:name": "bwa-mem",
    "sbg:validationErrors": [],
    "sbg:projectId": "c02da650-8d36-4957-a8e5-2d496caa78d2",
    "sbg:toolkitVersion": "0.7.10",
    "sbg:contributors": [
      "luka_stage"
    ],
    "sbg:createdOn": 1437405763,
    "sbg:modifiedOn": 1437461694,
    "sbg:latestRevision": 3,
    "sbg:toolkit": "BWA"
  }
}