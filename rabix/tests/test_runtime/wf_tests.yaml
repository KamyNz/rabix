# Workflow tests. Equivalent to wf_tests.json
# Dereference all import pointers then look at "tests" object
# Each test has a "job" to run and expected "outputs"
# For expected failures, "fails" is truthy value with reason
# "requiresFeatures" is a list of following feature requirements (to allow testing partial conformance):
#  map - support for parallel-for-each on single port
#  multilink - support for multiple incoming data links to same port
#  nested - support for nested workflows

tools:
  add:
    id: add
    class: ExpressionTool
    inputs:
      - id: a
        type: int
      - id: b
        type: int
    outputs:
      - id: c
        type: int
    engine: javascript
    script: "{return {c: $job.inputs.a + $job.inputs.b}}"

  mul:
    id: mul
    class: ExpressionTool
    inputs:
      - id: a
        type: int
      - id: b
        type: int
    outputs:
      - id: c
        type: int
    engine: javascript
    script: "{return {c: $job.inputs.a * $job.inputs.b}}"

  sum:
    id: sum
    class: ExpressionTool
    inputs:
      - id: arr
        type:
          type: array
          items: int
    outputs:
      - id: sum
        type: int
    engine: javascript
    script: |
      {
        var result = 0;

        for (var i = 0; i < $job.inputs.arr.length; i++) {
          result += $job.inputs.arr[i];
        }
        return {sum: result};
      }


workflows:
  add_one_mul_two:
    id: add_one_mul_two
    class: Workflow
    steps:
      - id: add_one
        run:
          import: "#tools/add"
        inputs:
          - id: add_one.a
            connect:
              source: a
          - id: add_one.b
            default: 1
        outputs:
          - id: add_one.c
      - id: times_two
        run:
          import: "#tools/mul"
        inputs:
          - id: times_two.a
            connect:
              source: add_one.c
          - id: times_two.b
            default: 2
        outputs:
          - id: times_two.c
    inputs:
      - id: a
        type: int
    outputs:
      - id: result
        type: int
        connect:
          source: times_two.c

  add_mul_sum:
    id: add_mul_sum
    class: Workflow
    steps:
      - id: add_mul
        run:
          import: "#workflows/add_one_mul_two"
        inputs:
          - id: add_mul.a
            connect: { source: a }
        outputs:
          - id: add_mul.result

      - id: sum
        run:
          import: "#/tools/sum"
        inputs:
          - id: arr
            connect: { source: add_mul.result }
        outputs:
          - id: sum.result
    inputs:
      - id: a
        type: int
    outputs:
      - id: result
        type: int
        connect: { source: sum.result }

  multi_link_sum:
    id: multi_link_sum
    class: Workflow
    steps:
      - id: sum
        run:
          import: "#tools/sum"
        inputs:
          - id: sum.arr
            connect:
              - source: a
              - source: b
        outputs:
          - id: sum.sum
    inputs:
      - id: a
        type: int
      - id: b
        type: int
    outputs:
      - id: result
        type: int
        connect: { source: sum.sum }

jobs:
  simple_sum:
    class: Job
    app:
      import: "#tools/sum"
    inputs:
      arr: [1, 2, 3]

  simple_add_mul:
    class: Job
    app:
      import: "#workflows/add_one_mul_two"
    inputs:
      a: 1

  multi_link_sum:
    class: Job
    app:
      import: "#workflows/multi_link_sum"
    inputs:
      a: 1
      b: 1

  batch_add_one_mul_two:
    class: Job
    app:
      import: "#workflows/add_one_mul_two"
    inputs:
      a: [1, 2, 3]

  add_mul_sum:
    class: Job
    app:
      import: "#workflows/add_mul_sum"
    inputs:
      a: [1, 2, 3]

tests:
  simple_sum:
    class: Test
    job:
      import: "#jobs/simple_sum"
    outputs:
      sum: 6

  simple_add_mul:
    class: Test
    job:
      import: "#jobs/simple_add_mul"
    outputs:
      result: 4

  multi_link_sum:
    class: Test
    job:
      import: "#jobs/multi_link_sum"
    outputs:
      result: 2
    requiresFeatures: [multilink]

  batch_add_one_mul_two:
    class: Test
    job:
      import: "#jobs/batch_add_one_mul_two"
    outputs:
      result: [4, 6, 8]
    requiresFeatures: [map]

#  add_mul_sum:
#    class: Test
#    job:
#      import: "#jobs/add_mul_sum"
#    outputs:
#      result: 18
#    requiresFeatures: [map, nested]
